set(THIS_PROJECT CryRenderD3D11)

project( ${THIS_PROJECT} )

#START-FILE-LIST
# File List auto generated by waf2cmake.py, do not modify manually.

set (SourceGroup_3rdParty_AGS
	"../../../SDKs/AMD/AGS Lib/inc/amd_ags.h"
)
source_group("3rdParty\\AGS" FILES ${SourceGroup_3rdParty_AGS})


set (SourceGroup_3rdParty_AMDExt
	../../../SDKs/AMD/AMD_Extensions/AmdDxExt.h
	../../../SDKs/AMD/AMD_Extensions/AmdDxExtApi.h
	../../../SDKs/AMD/AMD_Extensions/AmdDxExtDepthBounds.h
	../../../SDKs/AMD/AMD_Extensions/AmdDxExtDepthBoundsApi.h
	../../../SDKs/AMD/AMD_Extensions/AmdDxExtIface.h
)
source_group("3rdParty\\AMDExt" FILES ${SourceGroup_3rdParty_AMDExt})


set (SourceGroup_3rdParty_LiquidVR
	../../../SDKs/LiquidVR/public_mgpu/inc/AmdDxExtMgpuAppControlApi.h
	../../../SDKs/LiquidVR/public_mgpu/inc/AmdExtMgpuAppControl.h
)
source_group("3rdParty\\LiquidVR" FILES ${SourceGroup_3rdParty_LiquidVR})


set (SourceGroup_3rdParty_NVAPI
	../../../SDKs/NVAPI/nvapi.h
)
source_group("3rdParty\\NVAPI" FILES ${SourceGroup_3rdParty_NVAPI})


set (SourceGroup_Common
	../Common/CommonRender.cpp
	../Common/DeferredRenderUtils.cpp
	../Common/FencedBuffer.cpp
	../Common/Include_HLSL_CPP_Shared.h
	../Common/IntroMovieRenderer.cpp
	../Common/IntroMovieRenderer.h
	../Common/LightVolumeBuffer.cpp
	../Common/MatrixStack.cpp
	../Common/ParticleBuffer.cpp
	../Common/RenderAuxGeom.cpp
	../Common/RenderItemDrawer.cpp
	../Common/RenderPipeline.cpp
	../Common/RenderThread.cpp
	../Common/RenderView.cpp
	../Common/Renderer.cpp
	../Common/RendererCVars.cpp
	../Common/Renderer_Jobs.cpp
	../Common/ResFile.cpp
	../Common/ResFileLookupDataMan.cpp
	../Common/ResFileLookupDataMan.h
	../Common/ShadowUtils.cpp
	../Common/Shadow_Renderer.cpp
	../Common/SmartGlassContext.h
	../Common/TextMessages.cpp
	../Common/TextMessages.h
	../Common/WaterUtils.cpp
)
source_group("Common" FILES ${SourceGroup_Common})


set (SourceGroup_Common_PostProcess
	../Common/PostProcess/PostEffects.cpp
	../Common/PostProcess/PostEffects.h
	../Common/PostProcess/PostProcess.cpp
	../Common/PostProcess/PostProcess.h
	../Common/PostProcess/PostProcessUtils.cpp
	../Common/PostProcess/PostProcessUtils.h
)
source_group("Common\\PostProcess" FILES ${SourceGroup_Common_PostProcess})


set (SourceGroup_Common_RendElements
	../Common/RendElements/CREBeam.cpp
	../Common/RendElements/CREBreakableGlass.cpp
	../Common/RendElements/CREClientPoly.cpp
	../Common/RendElements/CRECloud.cpp
	../Common/RendElements/CREDeferredShading.cpp
	../Common/RendElements/CREFarTreeSprites.cpp
	../Common/RendElements/CREFogVolume.cpp
	../Common/RendElements/CREGameEffect.cpp
	../Common/RendElements/CREGeomCache.cpp
	../Common/RendElements/CREHDRProcess.cpp
	../Common/RendElements/CREImposter.cpp
	../Common/RendElements/CRELightPropagationVolume.cpp
	../Common/RendElements/CREMesh.cpp
	../Common/RendElements/CREOclusionQuery.cpp
	../Common/RendElements/CREParticle.cpp
	../Common/RendElements/CREPostProcess.cpp
	../Common/RendElements/CREPrismObject.cpp
	../Common/RendElements/CRESky.cpp
	../Common/RendElements/CREVolumeObject.cpp
	../Common/RendElements/CREWaterOcean.cpp
	../Common/RendElements/CREWaterVolume.cpp
	../Common/RendElements/RendElement.cpp
	CRELensOpticsD3D.cpp
)
source_group("Common\\RendElements" FILES ${SourceGroup_Common_RendElements})


set (SourceGroup_Common_RendElements_LensOptics
	../Common/RendElements/AbstractMeshElement.cpp
	../Common/RendElements/AbstractMeshElement.h
	../Common/RendElements/CameraOrbs.cpp
	../Common/RendElements/CameraOrbs.h
	../Common/RendElements/ChromaticRing.cpp
	../Common/RendElements/ChromaticRing.h
	../Common/RendElements/FlareSoftOcclusionQuery.cpp
	../Common/RendElements/FlareSoftOcclusionQuery.h
	../Common/RendElements/Ghost.cpp
	../Common/RendElements/Ghost.h
	../Common/RendElements/Glow.cpp
	../Common/RendElements/Glow.h
	../Common/RendElements/ImageSpaceShafts.cpp
	../Common/RendElements/ImageSpaceShafts.h
	../Common/RendElements/Interpolator.h
	../Common/RendElements/IrisShafts.cpp
	../Common/RendElements/IrisShafts.h
	../Common/RendElements/MeshUtil.cpp
	../Common/RendElements/MeshUtil.h
	../Common/RendElements/OpticsElement.cpp
	../Common/RendElements/OpticsElement.h
	../Common/RendElements/OpticsFactory.cpp
	../Common/RendElements/OpticsFactory.h
	../Common/RendElements/OpticsGroup.cpp
	../Common/RendElements/OpticsGroup.h
	../Common/RendElements/OpticsPredef.hpp
	../Common/RendElements/OpticsProxy.cpp
	../Common/RendElements/OpticsProxy.h
	../Common/RendElements/OpticsReference.cpp
	../Common/RendElements/OpticsReference.h
	../Common/RendElements/RootOpticsElement.cpp
	../Common/RendElements/RootOpticsElement.h
	../Common/RendElements/Streaks.cpp
	../Common/RendElements/Streaks.h
	../Common/RendElements/Timeline.h
)
source_group("Common\\RendElements\\LensOptics" FILES ${SourceGroup_Common_RendElements_LensOptics})


set (SourceGroup_Common_RendElements_Utils
	../Common/RendElements/Utils/PolygonMath2D.cpp
	../Common/RendElements/Utils/PolygonMath2D.h
	../Common/RendElements/Utils/SpatialHashGrid.h
)
source_group("Common\\RendElements\\Utils" FILES ${SourceGroup_Common_RendElements_Utils})


set (SourceGroup_Common_RendElements_h
	../../CryCommon/CREPrismObject.h
	../Common/RendElements/CREBeam.h
	../Common/RendElements/CREClientPoly.h
	../Common/RendElements/CRECloud.h
	../Common/RendElements/CREDeferredShading.h
	../Common/RendElements/CREHDRProcess.h
	../Common/RendElements/CRELensOptics.h
	../Common/RendElements/CREMeshImpl.h
	../Common/RendElements/Stars.h
)
source_group("Common\\RendElements_h" FILES ${SourceGroup_Common_RendElements_h})


set (SourceGroup_Common_RenderMesh
	../Common/RenderMesh.cpp
	../Common/RenderMesh.h
	../Common/RenderMesh_Render.cpp
	../Common/RenderMesh_SetMesh.cpp
)
source_group("Common\\RenderMesh" FILES ${SourceGroup_Common_RenderMesh})


set (SourceGroup_Common_Shaders
	../Common/Shaders/CShader.h
	../Common/Shaders/CShaderBin.h
	../Common/Shaders/Parser.cpp
	../Common/Shaders/Parser.h
	../Common/Shaders/ParserBin.cpp
	../Common/Shaders/ParserBin.h
	../Common/Shaders/RemoteCompiler.cpp
	../Common/Shaders/RemoteCompiler.h
	../Common/Shaders/Shader.h
	../Common/Shaders/ShaderCache.cpp
	../Common/Shaders/ShaderCache.h
	../Common/Shaders/ShaderComponents.cpp
	../Common/Shaders/ShaderComponents.h
	../Common/Shaders/ShaderCore.cpp
	../Common/Shaders/ShaderFXParseBin.cpp
	../Common/Shaders/ShaderParse.cpp
	../Common/Shaders/ShaderResources.cpp
	../Common/Shaders/ShaderResources.h
	../Common/Shaders/ShaderScript.cpp
	../Common/Shaders/ShaderSerialize.cpp
	../Common/Shaders/ShaderSerialize.h
	../Common/Shaders/ShaderTemplate.cpp
)
source_group("Common\\Shaders" FILES ${SourceGroup_Common_Shaders})


set (SourceGroup_Common_Textures
	../Common/Textures/DynTexture.cpp
	../Common/Textures/ITextureStreamer.cpp
	../Common/Textures/PlanningTextureStreamer.cpp
	../Common/Textures/PlanningTextureStreamer.h
	../Common/Textures/PlanningTextureStreamer_Jobs.cpp
	../Common/Textures/PowerOf2BlockPacker.cpp
	../Common/Textures/PowerOf2BlockPacker.h
	../Common/Textures/StatoscopeTextureStreaming.cpp
	../Common/Textures/StatoscopeTextureStreaming.h
	../Common/Textures/Texture.cpp
	../Common/Textures/Texture.h
	../Common/Textures/TextureArrayAlloc.h
	../Common/Textures/TextureCompiler.cpp
	../Common/Textures/TextureCompiler.h
	../Common/Textures/TextureHelpers.cpp
	../Common/Textures/TextureHelpers.h
	../Common/Textures/TextureManager.cpp
	../Common/Textures/TextureManager.h
	../Common/Textures/TextureStreamPool.h
	../Common/Textures/TextureStreaming.cpp
)
source_group("Common\\Textures" FILES ${SourceGroup_Common_Textures})


set (SourceGroup_Common_Textures_Image
	../Common/Textures/Image/CImage.cpp
	../Common/Textures/Image/DDSImage.cpp
	../Common/Textures/Image/JpgImage.cpp
	../Common/Textures/Image/TgaImage.cpp
)
source_group("Common\\Textures\\Image" FILES ${SourceGroup_Common_Textures_Image})


set (SourceGroup_Common_Textures_Image_Image_h
	../Common/Textures/Image/CImage.h
	../Common/Textures/Image/DDSImage.h
)
source_group("Common\\Textures\\Image\\Image_h" FILES ${SourceGroup_Common_Textures_Image_Image_h})


set (SourceGroup_Common_h
	../Common/CommonRender.h
	../Common/DeferredRenderUtils.h
	../Common/IColorGradingControllerInt.h
	../Common/LockFreeAddVector.h
	../Common/OcclQuery.h
	../Common/RenderAuxGeom.h
	../Common/RenderFrameProfiler.h
	../Common/RenderItemDrawer.h
	../Common/RenderPipeline.h
	../Common/RenderThread.h
	../Common/RenderView.h
	../Common/Renderer.h
	../Common/RendererCVars.h
	../Common/ResFile.h
	../Common/ResFile_info.h
	../Common/ReverseDepth.h
	../Common/ShadowUtils.h
	../Common/Shadow_Renderer.h
	../Common/WaterUtils.h
)
source_group("Common_h" FILES ${SourceGroup_Common_h})


set (SourceGroup_DX12
	DX12/CCryDX12Object.cpp
	DX12/CCryDX12Object.hpp
	DX12/CryDX12.cpp
	DX12/CryDX12.hpp
	DX12/CryDX12Guid.hpp
	DX12/CryDX12Legacy.hpp
)
source_group("DX12" FILES ${SourceGroup_DX12})


set (SourceGroup_DX12_3rdParty
	DX12/Includes/concqueue-mpmc-bounded.hpp
	DX12/Includes/concqueue-mpsc.hpp
	DX12/Includes/concqueue-spsc-bounded.hpp
	DX12/Includes/concqueue-spsc.hpp
	DX12/Includes/concqueue.hpp
	DX12/Includes/d3d11tokenizedprogramformat.hpp
	DX12/Includes/d3dx12.h
	DX12/Includes/fasthash.h
	DX12/Includes/fasthash.inl
)
source_group("DX12\\3rdParty" FILES ${SourceGroup_DX12_3rdParty})


set (SourceGroup_DX12_API
	DX12/API/DX12AsyncCommandQueue.cpp
	DX12/API/DX12AsyncCommandQueue.hpp
	DX12/API/DX12Base.cpp
	DX12/API/DX12Base.hpp
	DX12/API/DX12CommandList.cpp
	DX12/API/DX12CommandList.hpp
	DX12/API/DX12CommandListFence.cpp
	DX12/API/DX12CommandListFence.hpp
	DX12/API/DX12DataStreamer.cpp
	DX12/API/DX12DataStreamer.hpp
	DX12/API/DX12DescriptorHeap.cpp
	DX12/API/DX12DescriptorHeap.hpp
	DX12/API/DX12Device.cpp
	DX12/API/DX12Device.hpp
	DX12/API/DX12PSO.cpp
	DX12/API/DX12PSO.hpp
	DX12/API/DX12QueryHeap.cpp
	DX12/API/DX12QueryHeap.hpp
	DX12/API/DX12Resource.cpp
	DX12/API/DX12Resource.hpp
	DX12/API/DX12RootSignature.cpp
	DX12/API/DX12RootSignature.hpp
	DX12/API/DX12SamplerState.cpp
	DX12/API/DX12SamplerState.hpp
	DX12/API/DX12Shader.cpp
	DX12/API/DX12Shader.hpp
	DX12/API/DX12State.cpp
	DX12/API/DX12State.hpp
	DX12/API/DX12SwapChain.cpp
	DX12/API/DX12SwapChain.hpp
	DX12/API/DX12View.cpp
	DX12/API/DX12View.hpp
)
source_group("DX12\\API" FILES ${SourceGroup_DX12_API})


set (SourceGroup_DX12_API_Redirections
	DX12/API/Redirections/D3D12CommandAllocator.inl
	DX12/API/Redirections/D3D12CommandQueue.inl
	DX12/API/Redirections/D3D12DescriptorHeap.inl
	DX12/API/Redirections/D3D12Device.inl
	DX12/API/Redirections/D3D12Fence.inl
	DX12/API/Redirections/D3D12GraphicsCommandList.inl
	DX12/API/Redirections/D3D12Heap.inl
	DX12/API/Redirections/D3D12QueryHeap.inl
	DX12/API/Redirections/D3D12Resource.inl
)
source_group("DX12\\API\\Redirections" FILES ${SourceGroup_DX12_API_Redirections})


set (SourceGroup_DX12_Device
	DX12/Device/CCryDX12Device.cpp
	DX12/Device/CCryDX12Device.hpp
	DX12/Device/CCryDX12DeviceChild.cpp
	DX12/Device/CCryDX12DeviceChild.hpp
	DX12/Device/CCryDX12DeviceContext.cpp
	DX12/Device/CCryDX12DeviceContext.hpp
)
source_group("DX12\\Device" FILES ${SourceGroup_DX12_Device})


set (SourceGroup_DX12_GI
	DX12/GI/CCryDX12GIAdapter.cpp
	DX12/GI/CCryDX12GIAdapter.hpp
	DX12/GI/CCryDX12GIDevice.cpp
	DX12/GI/CCryDX12GIDevice.hpp
	DX12/GI/CCryDX12GIFactory.cpp
	DX12/GI/CCryDX12GIFactory.hpp
	DX12/GI/CCryDX12GIOutput.cpp
	DX12/GI/CCryDX12GIOutput.hpp
	DX12/GI/CCryDX12SwapChain.cpp
	DX12/GI/CCryDX12SwapChain.hpp
)
source_group("DX12\\GI" FILES ${SourceGroup_DX12_GI})


set (SourceGroup_DX12_Misc
	DX12/Misc/SCryDX11PipelineState.cpp
	DX12/Misc/SCryDX11PipelineState.hpp
)
source_group("DX12\\Misc" FILES ${SourceGroup_DX12_Misc})


set (SourceGroup_DX12_Resource
	DX12/Resource/CCryDX12Asynchronous.cpp
	DX12/Resource/CCryDX12Asynchronous.hpp
	DX12/Resource/CCryDX12Resource.cpp
	DX12/Resource/CCryDX12Resource.hpp
	DX12/Resource/CCryDX12View.cpp
	DX12/Resource/CCryDX12View.hpp
)
source_group("DX12\\Resource" FILES ${SourceGroup_DX12_Resource})


set (SourceGroup_DX12_Resource_Misc
	DX12/Resource/Misc/CCryDX12Buffer.cpp
	DX12/Resource/Misc/CCryDX12Buffer.hpp
	DX12/Resource/Misc/CCryDX12InputLayout.cpp
	DX12/Resource/Misc/CCryDX12InputLayout.hpp
	DX12/Resource/Misc/CCryDX12Query.cpp
	DX12/Resource/Misc/CCryDX12Query.hpp
	DX12/Resource/Misc/CCryDX12Shader.cpp
	DX12/Resource/Misc/CCryDX12Shader.hpp
)
source_group("DX12\\Resource\\Misc" FILES ${SourceGroup_DX12_Resource_Misc})


set (SourceGroup_DX12_Resource_State
	DX12/Resource/State/CCryDX12BlendState.cpp
	DX12/Resource/State/CCryDX12BlendState.hpp
	DX12/Resource/State/CCryDX12DepthStencilState.cpp
	DX12/Resource/State/CCryDX12DepthStencilState.hpp
	DX12/Resource/State/CCryDX12RasterizerState.cpp
	DX12/Resource/State/CCryDX12RasterizerState.hpp
	DX12/Resource/State/CCryDX12SamplerState.cpp
	DX12/Resource/State/CCryDX12SamplerState.hpp
)
source_group("DX12\\Resource\\State" FILES ${SourceGroup_DX12_Resource_State})


set (SourceGroup_DX12_Resource_Texture
	DX12/Resource/Texture/CCryDX12Texture1D.cpp
	DX12/Resource/Texture/CCryDX12Texture1D.hpp
	DX12/Resource/Texture/CCryDX12Texture2D.cpp
	DX12/Resource/Texture/CCryDX12Texture2D.hpp
	DX12/Resource/Texture/CCryDX12Texture3D.cpp
	DX12/Resource/Texture/CCryDX12Texture3D.hpp
	DX12/Resource/Texture/CCryDX12TextureBase.cpp
	DX12/Resource/Texture/CCryDX12TextureBase.hpp
)
source_group("DX12\\Resource\\Texture" FILES ${SourceGroup_DX12_Resource_Texture})


set (SourceGroup_DX12_Resource_View
	DX12/Resource/View/CCryDX12DepthStencilView.cpp
	DX12/Resource/View/CCryDX12DepthStencilView.hpp
	DX12/Resource/View/CCryDX12RenderTargetView.cpp
	DX12/Resource/View/CCryDX12RenderTargetView.hpp
	DX12/Resource/View/CCryDX12ShaderResourceView.cpp
	DX12/Resource/View/CCryDX12ShaderResourceView.hpp
	DX12/Resource/View/CCryDX12UnorderedAccessView.cpp
	DX12/Resource/View/CCryDX12UnorderedAccessView.hpp
)
source_group("DX12\\Resource\\View" FILES ${SourceGroup_DX12_Resource_View})


set (SourceGroup_DXGL
	DXGL/CryDXGL.cpp
	DXGL/CryDXGL.hpp
)
source_group("DXGL" FILES ${SourceGroup_DXGL})


set (SourceGroup_DXGL_Definitions
	DXGL/Definitions/CryDXGLGuid.hpp
	DXGL/Definitions/CryDXGLLegacy.hpp
	DXGL/Definitions/CryDXGLMisc.hpp
	DXGL/Definitions/DXGL_D3D11.h
	DXGL/Definitions/DXGL_D3D11Shader.h
	DXGL/Definitions/DXGL_D3DCommon.h
	DXGL/Definitions/DXGL_D3DCompiler.h
	DXGL/Definitions/DXGL_D3DX11.h
	DXGL/Definitions/DXGL_D3DX11tex.h
	DXGL/Definitions/DXGL_DXGIFormat.h
	DXGL/Definitions/DXGL_ID3D11Device.h
	DXGL/Definitions/DXGL_ID3D11DeviceContext.h
	DXGL/Definitions/DXGL_IDXGIFactory1.h
	DXGL/Definitions/DXGL_IDXGISwapChain.h
	DXGL/Definitions/DXGL_dxgi.h
	DXGL/Definitions/DXGL_dxgitype.h
	DXGL/Definitions/ICryDXGLUnknown.hpp
)
source_group("DXGL\\Definitions" FILES ${SourceGroup_DXGL_Definitions})


set (SourceGroup_DXGL_Implementation
	DXGL/Implementation/AppleGPUInfoUtils.h
	DXGL/Implementation/GLCommon.hpp
	DXGL/Implementation/GLContext.cpp
	DXGL/Implementation/GLContext.hpp
	DXGL/Implementation/GLCryPlatform.hpp
	DXGL/Implementation/GLDevice.cpp
	DXGL/Implementation/GLDevice.hpp
	DXGL/Implementation/GLFeatures.hpp
	DXGL/Implementation/GLFormat.cpp
	DXGL/Implementation/GLFormat.hpp
	DXGL/Implementation/GLInstrument.hpp
	DXGL/Implementation/GLPlatform.hpp
	DXGL/Implementation/GLResource.cpp
	DXGL/Implementation/GLResource.hpp
	DXGL/Implementation/GLShader.cpp
	DXGL/Implementation/GLShader.hpp
	DXGL/Implementation/GLState.cpp
	DXGL/Implementation/GLState.hpp
	DXGL/Implementation/GLView.cpp
	DXGL/Implementation/GLView.hpp
)
source_group("DXGL\\Implementation" FILES ${SourceGroup_DXGL_Implementation})


set (SourceGroup_DXGL_Interfaces
	DXGL/Interfaces/CCryDXGLBase.cpp
	DXGL/Interfaces/CCryDXGLBase.hpp
	DXGL/Interfaces/CCryDXGLBlendState.cpp
	DXGL/Interfaces/CCryDXGLBlendState.hpp
	DXGL/Interfaces/CCryDXGLBlob.cpp
	DXGL/Interfaces/CCryDXGLBlob.hpp
	DXGL/Interfaces/CCryDXGLBuffer.cpp
	DXGL/Interfaces/CCryDXGLBuffer.hpp
	DXGL/Interfaces/CCryDXGLDepthStencilState.cpp
	DXGL/Interfaces/CCryDXGLDepthStencilState.hpp
	DXGL/Interfaces/CCryDXGLDepthStencilView.cpp
	DXGL/Interfaces/CCryDXGLDepthStencilView.hpp
	DXGL/Interfaces/CCryDXGLDevice.cpp
	DXGL/Interfaces/CCryDXGLDevice.hpp
	DXGL/Interfaces/CCryDXGLDeviceChild.cpp
	DXGL/Interfaces/CCryDXGLDeviceChild.hpp
	DXGL/Interfaces/CCryDXGLDeviceContext.cpp
	DXGL/Interfaces/CCryDXGLDeviceContext.hpp
	DXGL/Interfaces/CCryDXGLGIAdapter.cpp
	DXGL/Interfaces/CCryDXGLGIAdapter.hpp
	DXGL/Interfaces/CCryDXGLGIFactory.cpp
	DXGL/Interfaces/CCryDXGLGIFactory.hpp
	DXGL/Interfaces/CCryDXGLGIObject.cpp
	DXGL/Interfaces/CCryDXGLGIObject.hpp
	DXGL/Interfaces/CCryDXGLGIOutput.cpp
	DXGL/Interfaces/CCryDXGLGIOutput.hpp
	DXGL/Interfaces/CCryDXGLInputLayout.cpp
	DXGL/Interfaces/CCryDXGLInputLayout.hpp
	DXGL/Interfaces/CCryDXGLQuery.cpp
	DXGL/Interfaces/CCryDXGLQuery.hpp
	DXGL/Interfaces/CCryDXGLRasterizerState.cpp
	DXGL/Interfaces/CCryDXGLRasterizerState.hpp
	DXGL/Interfaces/CCryDXGLRenderTargetView.cpp
	DXGL/Interfaces/CCryDXGLRenderTargetView.hpp
	DXGL/Interfaces/CCryDXGLResource.cpp
	DXGL/Interfaces/CCryDXGLResource.hpp
	DXGL/Interfaces/CCryDXGLSamplerState.cpp
	DXGL/Interfaces/CCryDXGLSamplerState.hpp
	DXGL/Interfaces/CCryDXGLShader.cpp
	DXGL/Interfaces/CCryDXGLShader.hpp
	DXGL/Interfaces/CCryDXGLShaderReflection.cpp
	DXGL/Interfaces/CCryDXGLShaderReflection.hpp
	DXGL/Interfaces/CCryDXGLShaderResourceView.cpp
	DXGL/Interfaces/CCryDXGLShaderResourceView.hpp
	DXGL/Interfaces/CCryDXGLSwapChain.cpp
	DXGL/Interfaces/CCryDXGLSwapChain.hpp
	DXGL/Interfaces/CCryDXGLSwitchToRef.cpp
	DXGL/Interfaces/CCryDXGLSwitchToRef.hpp
	DXGL/Interfaces/CCryDXGLTexture1D.cpp
	DXGL/Interfaces/CCryDXGLTexture1D.hpp
	DXGL/Interfaces/CCryDXGLTexture2D.cpp
	DXGL/Interfaces/CCryDXGLTexture2D.hpp
	DXGL/Interfaces/CCryDXGLTexture3D.cpp
	DXGL/Interfaces/CCryDXGLTexture3D.hpp
	DXGL/Interfaces/CCryDXGLTextureBase.cpp
	DXGL/Interfaces/CCryDXGLTextureBase.hpp
	DXGL/Interfaces/CCryDXGLUnorderedAccessView.cpp
	DXGL/Interfaces/CCryDXGLUnorderedAccessView.hpp
	DXGL/Interfaces/CCryDXGLView.cpp
	DXGL/Interfaces/CCryDXGLView.hpp
	DXGL/Interfaces/DXEmulation.hpp
)
source_group("DXGL\\Interfaces" FILES ${SourceGroup_DXGL_Interfaces})


set (SourceGroup_DXGL_Specification
	DXGL/Specification/glad_egl.c
	DXGL/Specification/glad_egl.h
	DXGL/Specification/glad_gl.c
	DXGL/Specification/glad_gl.h
	DXGL/Specification/glad_glx.c
	DXGL/Specification/glad_glx.h
	DXGL/Specification/glad_wgl.c
	DXGL/Specification/glad_wgl.h
)
source_group("DXGL\\Specification" FILES ${SourceGroup_DXGL_Specification})


set (SourceGroup_DXOrbis
	DXOrbis/CCryDXOrbisAPtr.hpp
	DXOrbis/CCryDXOrbisDummy.hpp
	DXOrbis/CCryDXOrbisGuid.hpp
	DXOrbis/CCryDXOrbisMisc.hpp
	DXOrbis/CCryDXOrbisMisc9.hpp
	DXOrbis/CCryDXOrbisRenderDeviceWrapper.hpp
	DXOrbis/CCryDXOrbisRenderer.cpp
	DXOrbis/CCryDXOrbisRenderer.hpp
	DXOrbis/CCryTypes.hpp
)
source_group("DXOrbis" FILES ${SourceGroup_DXOrbis})


set (SourceGroup_DXOrbis_DXOrbisGI
	DXOrbis/DXOrbisGI/CCryDXOrbisGI.cpp
	DXOrbis/DXOrbisGI/CCryDXOrbisGI.hpp
	DXOrbis/DXOrbisGI/CCryDXOrbisGIAdapter.cpp
	DXOrbis/DXOrbisGI/CCryDXOrbisGIAdapter.hpp
	DXOrbis/DXOrbisGI/CCryDXOrbisGIDevice.cpp
	DXOrbis/DXOrbisGI/CCryDXOrbisGIDevice.hpp
	DXOrbis/DXOrbisGI/CCryDXOrbisGIFactory.cpp
	DXOrbis/DXOrbisGI/CCryDXOrbisGIFactory.hpp
	DXOrbis/DXOrbisGI/CCryDXOrbisGIOutput.cpp
	DXOrbis/DXOrbisGI/CCryDXOrbisGIOutput.hpp
)
source_group("DXOrbis\\DXOrbisGI" FILES ${SourceGroup_DXOrbis_DXOrbisGI})


set (SourceGroup_DXOrbis_Debug
	DXOrbis/Debug/SouthernIslandsISA.cpp
	DXOrbis/Debug/SouthernIslandsISA.h
)
source_group("DXOrbis\\Debug" FILES ${SourceGroup_DXOrbis_Debug})


set (SourceGroup_DXOrbis_Device
	DXOrbis/Device/CCryDXOrbisRenderDevice.cpp
	DXOrbis/Device/CCryDXOrbisRenderDevice.hpp
	DXOrbis/Device/CCryDXOrbisShaderState.hpp
	DXOrbis/Device/CCryDXOrbisShaderState_CUE.cpp
	DXOrbis/Device/CCryDXOrbisShaderState_CUE.h
	DXOrbis/Device/CCryDXOrbisShaderState_SCUE.cpp
	DXOrbis/Device/CCryDXOrbisShaderState_SCUE.h
	DXOrbis/Device/CCryDXOrbisSwapChain.cpp
	DXOrbis/Device/CCryDXOrbisSwapChain.hpp
)
source_group("DXOrbis\\Device" FILES ${SourceGroup_DXOrbis_Device})


set (SourceGroup_DXOrbis_Device_Resources
	DXOrbis/Device/Resource/CCryDXOrbisResource.cpp
	DXOrbis/Device/Resource/CCryDXOrbisResource.hpp
)
source_group("DXOrbis\\Device\\Resources" FILES ${SourceGroup_DXOrbis_Device_Resources})


set (SourceGroup_DXOrbis_Device_Resources_Buffer
	DXOrbis/Device/Resource/Buffer/CCryDXOrbisBuffer.cpp
	DXOrbis/Device/Resource/Buffer/CCryDXOrbisBuffer.hpp
)
source_group("DXOrbis\\Device\\Resources\\Buffer" FILES ${SourceGroup_DXOrbis_Device_Resources_Buffer})


set (SourceGroup_DXOrbis_Device_Resources_Misc
	DXOrbis/Device/CCryDXOrbisBlob.cpp
	DXOrbis/Device/CCryDXOrbisBlob.hpp
	DXOrbis/Device/Resource/Misc/CCryDXOrbisDepthStencilView.cpp
	DXOrbis/Device/Resource/Misc/CCryDXOrbisDepthStencilView.hpp
	DXOrbis/Device/Resource/Misc/CCryDXOrbisInputLayout.cpp
	DXOrbis/Device/Resource/Misc/CCryDXOrbisInputLayout.hpp
	DXOrbis/Device/Resource/Misc/CCryDXOrbisRenderTargetView.cpp
	DXOrbis/Device/Resource/Misc/CCryDXOrbisRenderTargetView.hpp
)
source_group("DXOrbis\\Device\\Resources\\Misc" FILES ${SourceGroup_DXOrbis_Device_Resources_Misc})


set (SourceGroup_DXOrbis_Device_Resources_Shaders
	DXOrbis/Device/Resource/Misc/CCryDXOrbisShader.cpp
	DXOrbis/Device/Resource/Misc/CCryDXOrbisShader.hpp
	DXOrbis/Device/Resource/Misc/CCryDXOrbisShaderReflection.cpp
	DXOrbis/Device/Resource/Misc/CCryDXOrbisShaderReflection.hpp
	DXOrbis/Device/Resource/Misc/CCryDXOrbisShaderResourceView.cpp
	DXOrbis/Device/Resource/Misc/CCryDXOrbisShaderResourceView.hpp
)
source_group("DXOrbis\\Device\\Resources\\Shaders" FILES ${SourceGroup_DXOrbis_Device_Resources_Shaders})


set (SourceGroup_DXOrbis_Device_Resources_States
	DXOrbis/Device/Resource/States/CCryDXOrbisBlendState.cpp
	DXOrbis/Device/Resource/States/CCryDXOrbisBlendState.hpp
	DXOrbis/Device/Resource/States/CCryDXOrbisDepthStencilState.cpp
	DXOrbis/Device/Resource/States/CCryDXOrbisDepthStencilState.hpp
	DXOrbis/Device/Resource/States/CCryDXOrbisRasterizerState.cpp
	DXOrbis/Device/Resource/States/CCryDXOrbisRasterizerState.hpp
	DXOrbis/Device/Resource/States/CCryDXOrbisSamplerState.cpp
	DXOrbis/Device/Resource/States/CCryDXOrbisSamplerState.hpp
)
source_group("DXOrbis\\Device\\Resources\\States" FILES ${SourceGroup_DXOrbis_Device_Resources_States})


set (SourceGroup_DXOrbis_Device_Resources_Textures
	DXOrbis/Device/Resource/Textures/CCryDXOrbisTexture1D.cpp
	DXOrbis/Device/Resource/Textures/CCryDXOrbisTexture1D.hpp
	DXOrbis/Device/Resource/Textures/CCryDXOrbisTexture2D.cpp
	DXOrbis/Device/Resource/Textures/CCryDXOrbisTexture2D.hpp
	DXOrbis/Device/Resource/Textures/CCryDXOrbisTexture3D.cpp
	DXOrbis/Device/Resource/Textures/CCryDXOrbisTexture3D.hpp
	DXOrbis/Device/Resource/Textures/CCryDXOrbisTextureBase.cpp
	DXOrbis/Device/Resource/Textures/CCryDXOrbisTextureBase.hpp
)
source_group("DXOrbis\\Device\\Resources\\Textures" FILES ${SourceGroup_DXOrbis_Device_Resources_Textures})


set (SourceGroup_DXOrbis_Device_SCUE
	DXOrbis/Device/SCUE/scue.cpp
	DXOrbis/Device/SCUE/scue.h
)
source_group("DXOrbis\\Device\\SCUE" FILES ${SourceGroup_DXOrbis_Device_SCUE})


set (SourceGroup_DXOrbis_Layer0
	DXOrbis/Layer0/CCryDXOrbis.hpp
	DXOrbis/Layer0/CCryDXOrbisGNM.cpp
	DXOrbis/Layer0/CCryDXOrbisGNM.hpp
	DXOrbis/Layer0/CCryDXOrbis_Orbis.hpp
)
source_group("DXOrbis\\Layer0" FILES ${SourceGroup_DXOrbis_Layer0})


set (SourceGroup_DXOrbis_Shaders
	../../../../Engine/EngineAssets/DXOrbis/csClearShader.pssl
	../../../../Engine/EngineAssets/DXOrbis/csClearUAV.pssl
	../../../../Engine/EngineAssets/DXOrbis/csCopyShader.pssl
	../../../../Engine/EngineAssets/DXOrbis/csCopyShader3D.pssl
	../../../../Engine/EngineAssets/DXOrbis/psConstantColor.pssl
	../../../../Engine/EngineAssets/DXOrbis/psPassthrough.pssl
	../../../../Engine/EngineAssets/DXOrbis/psPassthroughFloat.pssl
	../../../../Engine/EngineAssets/DXOrbis/psconstantcolorfloat.pssl
	../../../../Engine/EngineAssets/DXOrbis/vsPassthrough.pssl
)
source_group("DXOrbis\\Shaders" FILES ${SourceGroup_DXOrbis_Shaders})


set (SourceGroup_DeviceManager
	../Common/DevBuffer.h
	DevBuffer.cpp
	DeviceManager/DeviceManager.cpp
	DeviceManager/DeviceManager.h
	DeviceManager/DeviceManagerInline.h
	DeviceManager/DeviceManager_D3D11.inl
	DeviceManager/DeviceManager_D3D11_Durango.h
	DeviceManager/DeviceManager_D3D11_Durango.inl
	DeviceManager/DeviceManager_D3D11_NVAPI.h
	DeviceManager/DeviceManager_D3D11_NVAPI.inl
	DeviceManager/DeviceManager_D3D12.inl
	DeviceManager/DeviceManager_GNM.inl
	DeviceManager/DeviceWrapper12.cpp
	DeviceManager/DeviceWrapper12.h
	DeviceManager/DeviceWrapper12_D3D11.cpp
	DeviceManager/DeviceWrapper12_D3D12.cpp
	DeviceManager/TempDynBuffer.h
)
source_group("DeviceManager" FILES ${SourceGroup_DeviceManager})


set (SourceGroup_GraphicsPipeline
	GraphicsPipeline/AutoExposure.cpp
	GraphicsPipeline/AutoExposure.h
	GraphicsPipeline/Bloom.cpp
	GraphicsPipeline/Bloom.h
	GraphicsPipeline/DepthOfField.cpp
	GraphicsPipeline/DepthOfField.h
	GraphicsPipeline/HeightMapAO.cpp
	GraphicsPipeline/HeightMapAO.h
	GraphicsPipeline/MotionBlur.cpp
	GraphicsPipeline/MotionBlur.h
	GraphicsPipeline/PostAA.cpp
	GraphicsPipeline/PostAA.h
	GraphicsPipeline/SceneForward.cpp
	GraphicsPipeline/SceneForward.h
	GraphicsPipeline/SceneGBuffer.cpp
	GraphicsPipeline/SceneGBuffer.h
	GraphicsPipeline/ScreenSpaceObscurance.cpp
	GraphicsPipeline/ScreenSpaceObscurance.h
	GraphicsPipeline/ScreenSpaceReflections.cpp
	GraphicsPipeline/ScreenSpaceReflections.h
	GraphicsPipeline/ScreenSpaceSSS.cpp
	GraphicsPipeline/ScreenSpaceSSS.h
	GraphicsPipeline/ShadowMap.cpp
	GraphicsPipeline/ShadowMap.h
	GraphicsPipeline/StandardGraphicsPipeline.cpp
	GraphicsPipeline/StandardGraphicsPipeline.h
	GraphicsPipeline/SunShafts.cpp
	GraphicsPipeline/SunShafts.h
	GraphicsPipeline/ToneMapping.cpp
	GraphicsPipeline/ToneMapping.h
)
source_group("GraphicsPipeline" FILES ${SourceGroup_GraphicsPipeline})


set (SourceGroup_GraphicsPipeline_Common
	GraphicsPipeline/Common/FullscreenPass.h
	GraphicsPipeline/Common/GraphicsPipeline.h
	GraphicsPipeline/Common/GraphicsPipelineStage.h
	GraphicsPipeline/Common/GraphicsPipelineStateSet.cpp
	GraphicsPipeline/Common/GraphicsPipelineStateSet.h
	GraphicsPipeline/Common/PrimitiveRenderPass.cpp
	GraphicsPipeline/Common/PrimitiveRenderPass.h
	GraphicsPipeline/Common/SceneRenderPass.cpp
	GraphicsPipeline/Common/SceneRenderPass.h
	GraphicsPipeline/Common/UtilityPasses.cpp
	GraphicsPipeline/Common/UtilityPasses.h
	GraphicsPipeline/Common/VolumeRenderPass.h
)
source_group("GraphicsPipeline\\Common" FILES ${SourceGroup_GraphicsPipeline_Common})


set (SourceGroup_HeaderFiles
	../Common/CryDeviceWrapper.h
	../Common/CryNameR.h
	../Common/Defs.h
	../Common/FencedBuffer.h
	../Common/ISmartGlassContext.h
	../Common/LightVolumeBuffer.h
	../Common/ParticleBuffer.h
	../Common/Shaders/ShaderAllocator.h
	../Common/Textures/ITextureStreamer.h
	CompiledRenderObject.h
	D3DColorGradingController.h
	D3DDebug.h
	D3DDeferredShading.h
	D3DHWShader.h
	D3DLightPropagationVolume.h
	D3DMemReplayDevice.h
	D3DOculus.h
	D3DOpenVR.h
	D3DOsvr.h
	D3DPostProcess.h
	D3DRenderAuxGeom.h
	D3DStereo.h
	D3DTiledShading.h
	D3DVolumetricClouds.h
	D3DVolumetricFog.h
	D3D_SVO.h
	DeviceInfo.h
	DeviceInfo.inl
	DeviceManager/DeviceManagerInline.h
	DriverD3D.h
	GPUTimer.h
	NullD3D11Device.h
	PipelineProfiler.h
	ShadowTextureGroupManager.h
	StatoscopeRenderStats.h
	resource.h
)
source_group("Header Files" FILES ${SourceGroup_HeaderFiles})


set (SourceGroup_HeaderFiles_Gpu
	Gpu/GpuBitonicSort.h
	Gpu/GpuComputeBackend.h
)
source_group("Header Files\\Gpu" FILES ${SourceGroup_HeaderFiles_Gpu})


set (SourceGroup_HeaderFiles_Gpu_Particles
	Gpu/Particles/CREGpuParticle.h
	Gpu/Particles/GpuParticleComponentRuntime.h
	Gpu/Particles/GpuParticleContainer.h
	Gpu/Particles/GpuParticleFeatureBase.h
	Gpu/Particles/GpuParticleFeatureCollision.h
	Gpu/Particles/GpuParticleFeatureColor.h
	Gpu/Particles/GpuParticleFeatureFactory.h
	Gpu/Particles/GpuParticleFeatureField.h
	Gpu/Particles/GpuParticleFeatureFluidDynamics.h
	Gpu/Particles/GpuParticleFeatureLifeTime.h
	Gpu/Particles/GpuParticleFeatureLocation.h
	Gpu/Particles/GpuParticleFeatureMotion.h
	Gpu/Particles/GpuParticleFeatureRender.h
	Gpu/Particles/GpuParticleFeatureSpawn.h
	Gpu/Particles/GpuParticleFeatureVelocity.h
	Gpu/Particles/GpuParticleManager.h
)
source_group("Header Files\\Gpu\\Particles" FILES ${SourceGroup_HeaderFiles_Gpu_Particles})


set (SourceGroup_HeaderFiles_Gpu_Physics
	Gpu/Physics/GpuPhysicsParticleFluid.h
)
source_group("Header Files\\Gpu\\Physics" FILES ${SourceGroup_HeaderFiles_Gpu_Physics})


set (SourceGroup_Mac
	DXGL/Implementation/AppleGPUInfoUtils.mm
)
source_group("Mac" FILES ${SourceGroup_Mac})


set (SourceGroup_Root
	../StdAfx.cpp
	../StdAfx.h
	ResourceCompilerHelpers.cpp
)


set (SourceGroup_SourceFiles
	CompiledRenderObject.cpp
	D3DAmbientOcclusion.cpp
	D3DColorGradingController.cpp
	D3DDebug.cpp
	D3DDeferredPasses.cpp
	D3DDeferredRender.cpp
	D3DDeferredShading.cpp
	D3DFXPipeline.cpp
	D3DFont.cpp
	D3DHDRRender.cpp
	D3DHWShader.cpp
	D3DHWShaderCompiling.cpp
	D3DLightPropagationVolume.cpp
	D3DLog.cpp
	D3DMemReplayDevice.cpp
	D3DMeshBaker.cpp
	D3DOcclQuery.cpp
	D3DOculus.cpp
	D3DOpenVR.cpp
	D3DOsvr.cpp
	D3DREBreakableGlass.cpp
	D3DREBreakableGlassBuffer.cpp
	D3DREBreakableGlassBuffer.h
	D3DRECloud.cpp
	D3DREImposter.cpp
	D3DRendPipeline.cpp
	D3DRendPipeline_Jobs.cpp
	D3DRenderAuxGeom.cpp
	D3DRenderRE.cpp
	D3DRenderThread.cpp
	D3DShaders.cpp
	D3DShadows.cpp
	D3DSprites.cpp
	D3DStereo.cpp
	D3DSystem.cpp
	D3DTexture.cpp
	D3DTextureStreamPool.cpp
	D3DTexturesStreaming.cpp
	D3DTiledShading.cpp
	D3DVolumetricClouds.cpp
	D3DVolumetricFog.cpp
	D3D_SVO.cpp
	DriverD3D.cpp
	GPUTimer.cpp
	PipelineProfiler.cpp
	SmartGlassContext.cpp
	SmartGlassManager.cpp
	SmartGlassManager.h
	StatoscopeRenderStats.cpp
)
source_group("Source Files" FILES ${SourceGroup_SourceFiles})


set (SourceGroup_SourceFiles_BenchmarkCustomization
	BenchmarkCustom/BenchmarkRendererSensor.cpp
	BenchmarkCustom/BenchmarkRendererSensor.h
)
source_group("Source Files\\Benchmark Customization" FILES ${SourceGroup_SourceFiles_BenchmarkCustomization})


set (SourceGroup_SourceFiles_D3DPostProcess
	D3DPostProcess.cpp
	PostProcessDOF.cpp
	PostProcessFilters.cpp
	PostProcessGame.cpp
	PostProcessHud3D.cpp
	PostProcessMisc.cpp
	PostProcessMotionBlur.cpp
	PostProcessRain.cpp
	PostProcessRenderModes.cpp
	PostProcessSnow.cpp
	PostProcessSunShafts.cpp
	PostProcessWater.cpp
)
source_group("Source Files\\D3DPostProcess" FILES ${SourceGroup_SourceFiles_D3DPostProcess})


set (SourceGroup_SourceFiles_Gpu
	Gpu/GpuBitonicSort.cpp
	Gpu/GpuComputeBackend.cpp
	Gpu/GpuMergeSort.cpp
)
source_group("Source Files\\Gpu" FILES ${SourceGroup_SourceFiles_Gpu})


set (SourceGroup_SourceFiles_Gpu_Particles
	Gpu/Particles/CREGpuParticle.cpp
	Gpu/Particles/GpuParticleComponentRuntime.cpp
	Gpu/Particles/GpuParticleContainer.cpp
	Gpu/Particles/GpuParticleFeatureCollision.cpp
	Gpu/Particles/GpuParticleFeatureColor.cpp
	Gpu/Particles/GpuParticleFeatureFactory.cpp
	Gpu/Particles/GpuParticleFeatureField.cpp
	Gpu/Particles/GpuParticleFeatureFluidDynamics.cpp
	Gpu/Particles/GpuParticleFeatureLifeTime.cpp
	Gpu/Particles/GpuParticleFeatureLocation.cpp
	Gpu/Particles/GpuParticleFeatureMotion.cpp
	Gpu/Particles/GpuParticleFeatureRender.cpp
	Gpu/Particles/GpuParticleFeatureSpawn.cpp
	Gpu/Particles/GpuParticleFeatureVelocity.cpp
	Gpu/Particles/GpuParticleManager.cpp
)
source_group("Source Files\\Gpu\\Particles" FILES ${SourceGroup_SourceFiles_Gpu_Particles})


set (SourceGroup_SourceFiles_Gpu_Physics
	Gpu/Physics/GpuPhysicsParticleFluid.cpp
)
source_group("Source Files\\Gpu\\Physics" FILES ${SourceGroup_SourceFiles_Gpu_Physics})


# Support unity build with uber files
set(CryGpuParticles_uber_cpp ${SourceGroup_HeaderFiles_Gpu} ${SourceGroup_HeaderFiles_Gpu_Particles} ${SourceGroup_HeaderFiles_Gpu_Physics} ${SourceGroup_SourceFiles_Gpu} ${SourceGroup_SourceFiles_Gpu_Particles} ${SourceGroup_SourceFiles_Gpu_Physics}  )
enable_unity_build( "CryGpuParticles_uber.cpp" CryGpuParticles_uber_cpp )

set(CryRenderer_dx_orbis_uber_0_cpp ${SourceGroup_DXOrbis} ${SourceGroup_DXOrbis_Device} ${SourceGroup_DXOrbis_Device_Resources} ${SourceGroup_DXOrbis_Device_Resources_Buffer} ${SourceGroup_DXOrbis_Device_Resources_Misc} ${SourceGroup_DXOrbis_Device_Resources_States}  )
enable_unity_build( "CryRenderer_dx_orbis_uber_0.cpp" CryRenderer_dx_orbis_uber_0_cpp )

set(CryRenderer_dx_orbis_uber_1_cpp ${SourceGroup_DXOrbis_DXOrbisGI} ${SourceGroup_DXOrbis_Debug} ${SourceGroup_DXOrbis_Device_Resources_Shaders} ${SourceGroup_DXOrbis_Device_Resources_Textures} ${SourceGroup_DXOrbis_Device_SCUE} ${SourceGroup_DXOrbis_Layer0} ${SourceGroup_DXOrbis_Shaders}  )
enable_unity_build( "CryRenderer_dx_orbis_uber_1.cpp" CryRenderer_dx_orbis_uber_1_cpp )

set(CryRenderer_render_elements_uber_0_cpp  )
enable_unity_build( "CryRenderer_render_elements_uber_0.cpp" CryRenderer_render_elements_uber_0_cpp )

set(CryRenderer_render_elements_uber_1_cpp ${SourceGroup_Common_RendElements} ${SourceGroup_Common_RendElements_LensOptics} ${SourceGroup_Common_RendElements_Utils} ${SourceGroup_Common_RendElements_h}  )
enable_unity_build( "CryRenderer_render_elements_uber_1.cpp" CryRenderer_render_elements_uber_1_cpp )

set(CryRenderer_textures_uber_cpp ${SourceGroup_Common_Textures} ${SourceGroup_Common_Textures_Image} ${SourceGroup_Common_Textures_Image_Image_h}  )
enable_unity_build( "CryRenderer_textures_uber.cpp" CryRenderer_textures_uber_cpp )

set(CryRenderer_uber_0_cpp ${SourceGroup_HeaderFiles}  )
enable_unity_build( "CryRenderer_uber_0.cpp" CryRenderer_uber_0_cpp )

set(CryRenderer_uber_1_cpp ${SourceGroup_SourceFiles_BenchmarkCustomization}  )
enable_unity_build( "CryRenderer_uber_1.cpp" CryRenderer_uber_1_cpp )

set(CryRenderer_uber_2_cpp ${SourceGroup_SourceFiles_D3DPostProcess}  )
enable_unity_build( "CryRenderer_uber_2.cpp" CryRenderer_uber_2_cpp )

set(CryRenderer_uber_3_cpp ${SourceGroup_Common} ${SourceGroup_Common_h}  )
enable_unity_build( "CryRenderer_uber_3.cpp" CryRenderer_uber_3_cpp )

set(CryRenderer_uber_4_cpp ${SourceGroup_Common_PostProcess} ${SourceGroup_Common_RenderMesh} ${SourceGroup_Common_Shaders}  )
enable_unity_build( "CryRenderer_uber_4.cpp" CryRenderer_uber_4_cpp )

set(CryRenderer_uber_5_cpp ${SourceGroup_DeviceManager}  )
enable_unity_build( "CryRenderer_uber_5.cpp" CryRenderer_uber_5_cpp )

set(CryRenderer_uber_6_cpp ${SourceGroup_GraphicsPipeline} ${SourceGroup_GraphicsPipeline_Common}  )
enable_unity_build( "CryRenderer_uber_6.cpp" CryRenderer_uber_6_cpp )

set(NoUberFile ${SourceGroup_3rdParty_AGS} ${SourceGroup_3rdParty_AMDExt} ${SourceGroup_3rdParty_LiquidVR} ${SourceGroup_3rdParty_NVAPI} ${SourceGroup_DX12} ${SourceGroup_DX12_3rdParty} ${SourceGroup_DX12_API} ${SourceGroup_DX12_API_Redirections} ${SourceGroup_DX12_Device} ${SourceGroup_DX12_GI} ${SourceGroup_DX12_Misc} ${SourceGroup_DX12_Resource} ${SourceGroup_DX12_Resource_Misc} ${SourceGroup_DX12_Resource_State} ${SourceGroup_DX12_Resource_Texture} ${SourceGroup_DX12_Resource_View} ${SourceGroup_DXGL} ${SourceGroup_DXGL_Definitions} ${SourceGroup_DXGL_Implementation} ${SourceGroup_DXGL_Interfaces} ${SourceGroup_DXGL_Specification} ${SourceGroup_Mac} ${SourceGroup_Root} ${SourceGroup_SourceFiles}  )


set (SOURCES
	${CryGpuParticles_uber_cpp}
	${CryRenderer_dx_orbis_uber_0_cpp}
	${CryRenderer_dx_orbis_uber_1_cpp}
	${CryRenderer_render_elements_uber_0_cpp}
	${CryRenderer_render_elements_uber_1_cpp}
	${CryRenderer_textures_uber_cpp}
	${CryRenderer_uber_0_cpp}
	${CryRenderer_uber_1_cpp}
	${CryRenderer_uber_2_cpp}
	${CryRenderer_uber_3_cpp}
	${CryRenderer_uber_4_cpp}
	${CryRenderer_uber_5_cpp}
	${CryRenderer_uber_6_cpp}
	${NoUberFile}
)
#END-FILE-LIST

set( DX12_SOURCES 
	${SourceGroup_DX12}
	${SourceGroup_DX12_3rdParty}
	${SourceGroup_DX12_API}
	${SourceGroup_DX12_Device}
	${SourceGroup_DX12_GI}
	${SourceGroup_DX12_Misc}
	${SourceGroup_DX12_Resource}
	${SourceGroup_DX12_Resource_Misc}
	${SourceGroup_DX12_Resource_State}
	${SourceGroup_DX12_Resource_Texture}
	${SourceGroup_DX12_Resource_View}
)


include_directories( ${CMAKE_CURRENT_SOURCE_DIR} )
include_directories( ${CMAKE_CURRENT_SOURCE_DIR}/.. )

include_directories( ${SDK_DIR}/squish-ccr )
include_directories( ${SDK_DIR}/lz4/lib )

add_definitions(-D_RENDERER)
add_definitions(-DDIRECT3D10)
#add_definitions(-DDXSDK=${DXSDK_DIR}/include/)

if(WIN32 OR DURANGO)
	add_definitions(-DXRENDERD3D10_EXPORTS)
	#add_definitions(-DDO_RENDERLOG)
	add_definitions(-DDO_RENDERSTATS)
endif(WIN32 OR DURANGO)

if(ORBIS)
	add_definitions(-DCRY_USE_GNM)
	include_directories( ${CMAKE_SOURCE_DIR}/Code ) #Include Code/ to find Tools/DXPSShaderCompiler/DXPSShaderCompiler/Core/Reflect/DXPSReflectionShared.hpp
endif(ORBIS)

# Exlude files from Build
set_source_files_properties(
	${SourceGroup_DXOrbis}
	${SourceGroup_DXOrbis_Device}
	${SourceGroup_DXOrbis_Device_Resources}
	${SourceGroup_DXOrbis_Device_Resources_Buffer}
	${SourceGroup_DXOrbis_Device_Resources_Misc}
	${SourceGroup_DXOrbis_Device_Resources_States}
	${SourceGroup_DXOrbis_Device_Resources_Textures}
	${SourceGroup_DXOrbis_Device_Resources_Shaders}
	${SourceGroup_DXOrbis_Device_SCUE}
	${SourceGroup_DXOrbis_Layer0}
	${SourceGroup_DXOrbis_DXOrbisGI}
	${SourceGroup_DXOrbisComputeShaders}
	${SourceGroup_DXOrbis_Debug}
	${SourceGroup_GNM}
	DeviceManager/DeviceWrapper12_GNM.cpp
	PROPERTIES HEADER_FILE_ONLY TRUE
)

if(ORBIS)
	# Exlude files from Build
	set_source_files_properties( D3DMeshBaker.cpp PROPERTIES HEADER_FILE_ONLY TRUE )
endif(ORBIS)

if (NOT ORBIS)
	set_source_files_properties( ${SourceGroup_DXGL} PROPERTIES HEADER_FILE_ONLY TRUE )
	set_source_files_properties( ${SourceGroup_DXGL_Definitions} PROPERTIES HEADER_FILE_ONLY TRUE )
	set_source_files_properties( ${SourceGroup_DXGL_Implementation} PROPERTIES HEADER_FILE_ONLY TRUE )
	set_source_files_properties( ${SourceGroup_DXGL_Interfaces} PROPERTIES HEADER_FILE_ONLY TRUE )
	set_source_files_properties( ${SourceGroup_DXGL_Specification} PROPERTIES HEADER_FILE_ONLY TRUE )
	
	list(REMOVE_ITEM SOURCES "${CMAKE_CURRENT_BINARY_DIR}/CryRenderer_dx_orbis_uber_0.cpp")
	list(REMOVE_ITEM SOURCES "${CMAKE_CURRENT_BINARY_DIR}/CryRenderer_dx_orbis_uber_1.cpp")
endif()

if (NOT MACOS)
	set_source_files_properties( ${SourceGroup_Mac} PROPERTIES HEADER_FILE_ONLY TRUE )
endif()

if (NOT MSVC_VERSION EQUAL 1900) # Not Visual Studio 2015
	if (WIN32 OR WIN64)
		include_directories( ${WINSDK_SDK_INCLUDE_DIR} )
		if(WIN64)
			link_directories( ${WINSDK_SDK_LIB_DIR}/x64 )
		elseif()
			link_directories( ${WINSDK_SDK_LIB_DIR}/x86 )
		endif()
	endif()
endif()

if (OPTION_GAME_PROJECT STREQUAL "BenchmarkVR")
	add_definitions(-DENABLE_BENCHMARK_SENSOR)
	include_directories( ${CMAKE_SOURCE_DIR}/Code/Game_SkyHarbor/BenchmarkFramework/includes )
endif()

set(DX11_SOURCES ${SOURCES})
list(REMOVE_ITEM DX11_SOURCES ${DX12_SOURCES})
add_library( ${THIS_PROJECT} ${DX11_SOURCES})

target_link_libraries( ${THIS_PROJECT} lzma lzss lz4 )

if(WIN32)
	target_link_libraries( ${THIS_PROJECT} Ws2_32 version )
	
	# When OpenGL
	target_link_libraries( ${THIS_PROJECT} opengl32 glu32 )

	target_link_libraries( ${THIS_PROJECT} dxguid d3d11 d3d10 d3d9 d3dcompiler )
	#target_link_libraries( ${THIS_PROJECT} ${CMAKE_SOURCE_DIR}/Code/Tools/CryD3DCompilerStub/Build/46/${BUILD_CPU_ARCHITECTURE}/CryD3DCompilerStub.lib )

	# Nvidia & AMD API
	if (WIN64)
		target_link_libraries( ${THIS_PROJECT} ${SDK_DIR}/NVAPI/amd64/nvapi64.lib )
		target_link_libraries( ${THIS_PROJECT} "${SDK_DIR}/AMD/AGS Lib/lib/x64/static/amd_ags64.lib" )
		#target_link_libraries( ${THIS_PROJECT} ${SDK_DIR}/nvDXTLibrary/x64/Release/nvDXTLibrary.lib )
	else()
		target_link_libraries( ${THIS_PROJECT} ${SDK_DIR}/NVAPI/x86/nvapi.lib )
		#target_link_libraries( ${THIS_PROJECT} ${SDK_DIR}/nvDXTLibrary/Win32/Release/nvDXTLibrary.lib )
	endif()

endif(WIN32)

if (DURANGO)
	set_source_files_properties( ${SourceGroup_DX_OpenGL} PROPERTIES HEADER_FILE_ONLY TRUE )
	target_link_libraries( ${THIS_PROJECT} ws2_32 SmartGlassInterop d3d11i d3dcompiler dxguid xg uuid )
endif()

if (OPTION_GAME_PROJECT STREQUAL "BenchmarkVR")
	target_link_libraries( ${THIS_PROJECT} BenchmarkFramework )
endif()

USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "../StdAfx.cpp" )
EXCLUDE_FILE_FROM_MSVC_PRECOMPILED_HEADER( "../Common/lzss.cpp" )

SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )

#------------------------------------------------------------------------------
#Create additionally DX12 module.
#------------------------------------------------------------------------------
if (WIN32)
	set(THIS_PROJECT CryRenderD3D12)
	
	include_directories( DX12/Includes )
	set( DX12_ALL_SOURCES ${SOURCES} )
	add_library( ${THIS_PROJECT} ${DX12_ALL_SOURCES})

	target_link_libraries( ${THIS_PROJECT} lzma lzss lz4 )
	target_link_libraries( ${THIS_PROJECT} Ws2_32 version )
	target_link_libraries( ${THIS_PROJECT} dxguid d3d11 d3dcompiler )
	target_link_libraries( ${THIS_PROJECT} d3d12 dxgi )
	if (WIN64)
		target_link_libraries( ${THIS_PROJECT} ${SDK_DIR}/NVAPI/amd64/nvapi64.lib )
		target_link_libraries( ${THIS_PROJECT} "${SDK_DIR}/AMD/AGS Lib/lib/x64/static/amd_ags64.lib" )
	else()
		target_link_libraries( ${THIS_PROJECT} ${SDK_DIR}/NVAPI/x86/nvapi.lib )
	endif()
	target_compile_definitions( ${THIS_PROJECT} PUBLIC -DCRY_USE_DX12 )
	USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "../StdAfx.cpp" )
	SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
endif()
#------------------------------------------------------------------------------
