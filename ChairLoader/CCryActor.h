#pragma once
#include "CActor.h"

class CCryActor : CGameObjectExtensionHelper<CCryActor, CActor, 40>, IGameObjectView, IGameObjectProfileManager
{
public:
	virtual void SelectNextItem(CCryActor* this, int, bool, int) = 0;
	virtual void SwitchToWeaponWithAccessoryFireMode(CCryActor* this) = 0;
	virtual void SelectLastItem(CCryActor* this, bool, bool) = 0;
	virtual void SelectItemByName(CCryActor* this, const char*, bool, bool) = 0;
	virtual void SelectItem(CCryActor* this, unsigned int, bool, bool) = 0;
	virtual bool ScheduleItemSwitch(CCryActor* this, unsigned int, bool, int, bool) = 0;
	virtual bool UseItem(CCryActor* this, unsigned int) = 0;
	virtual bool PickUpItem(CCryActor* this, unsigned int, bool, bool) = 0;
	virtual void DropAttachedItems(CCryActor* this) = 0;
	virtual void NetSimpleKill(CCryActor* this) = 0;
	virtual void NetKill(CCryActor* this, const CCryActor::KillParams*) = 0;
	virtual bool CanRagDollize(CCryActor* this) = 0;
	virtual void ReadDataFromXML(CCryActor* this, bool) = 0;
	virtual void NotifyInventoryAmmoChange(CCryActor* this, IEntityClass*, int) = 0;
	virtual void OnAction(CCryActor* this, const CCryName*, int, float) = 0;
	virtual void AddViewAngleOffsetForFrame(CCryActor* this, const Ang3_tpl<float>*) = 0;
	virtual void Revive(CCryActor* this, CCryActor::EReasonForRevive) = 0;
	virtual void Reset(CCryActor* this, bool) = 0;
	virtual void Physicalize(CCryActor* this, EStance) = 0;
	virtual void PostPhysicalize(CCryActor* this) = 0;
	virtual void RagDollize(CCryActor* this, bool) = 0;
	virtual void OnTeleported(CCryActor* this) = 0;
	virtual void SetSpectatorState(CCryActor* this, unsigned __int8) = 0;
	virtual CCryActor::EActorSpectatorState GetSpectatorState(CCryActor* this) = 0;
	virtual float GetSpectatorOrbitYawSpeed(CCryActor* this) = 0;
	virtual void SetSpectatorOrbitYawSpeed(CCryActor* this, float, bool) = 0;
	virtual bool CanSpectatorOrbitYaw(CCryActor* this) = 0;
	virtual float GetSpectatorOrbitPitchSpeed(CCryActor* this) = 0;
	virtual void SetSpectatorOrbitPitchSpeed(CCryActor* this, float, bool) = 0;
	virtual bool CanSpectatorOrbitPitch(CCryActor* this) = 0;
	virtual void ChangeCurrentFollowCameraSettings(CCryActor* this, bool) = 0;
	virtual void SetSpectatorModeAndOtherEntId(CCryActor* this, const unsigned __int8, const unsigned int, bool) = 0;
	virtual void SetSpectatorTarget(CCryActor* this, unsigned int) = 0;
	virtual unsigned int GetSpectatorTarget(CCryActor* this) = 0;
	virtual void SetSpectatorFixedLocation(CCryActor* this, unsigned int) = 0;
	virtual unsigned int GetSpectatorFixedLocation(CCryActor* this) = 0;
	virtual const SActorStats* GetActorStats(CCryActor* this) = 0;
	virtual SActorStats* GetActorStats(CCryActor* this) = 0;
	virtual void SetStats(CCryActor* this, SmartScriptTable*) = 0;
	virtual ICharacterInstance* GetFPArms(CCryActor* this, int) = 0;
	virtual void InitGameParams(CCryActor* this, const SActorGameParams*, const bool) = 0;
	virtual void SetParamsFromLua(CCryActor* this, SmartScriptTable*) = 0;
	virtual void Freeze(CCryActor* this, bool) = 0;
	virtual void Fall(CCryActor* this, const HitInfo*) = 0;
	virtual void KnockDown(CCryActor* this, float) = 0;
	virtual void SetLookAtTargetId(CCryActor* this, unsigned int, float) = 0;
	virtual void SetForceLookAtTargetId(CCryActor* this, unsigned int, float) = 0;
	virtual void StandUp(CCryActor* this) = 0;
	virtual void LinkToMountedWeapon(CCryActor* this, unsigned int) = 0;
	virtual IEntity* LinkToEntity(CCryActor* this, unsigned int, bool) = 0;
	virtual void StartInteractiveAction(CCryActor* this, unsigned int, int) = 0;
	virtual void StartInteractiveActionByName(CCryActor* this, const char*, bool, float) = 0;
	virtual void EndInteractiveAction(CCryActor* this, unsigned int) = 0;
	virtual void SupressViewBlending(CCryActor* this) = 0;
	virtual void SetMovementTarget(CCryActor* this, const Vec3_tpl<float>*, const Vec3_tpl<float>*, const Vec3_tpl<float>*, float) = 0;
	virtual bool CreateCodeEvent(CCryActor* this, SmartScriptTable*) = 0;
	virtual void SetTurnAnimationParams(CCryActor* this, const float, const float) = 0;
	virtual void SetAngles(CCryActor* this, const Ang3_tpl<float>*) = 0;
	virtual Ang3_tpl<float>* GetAngles(CCryActor* this, Ang3_tpl<float>* result) = 0;
	virtual void AddAngularImpulse(CCryActor* this, const Ang3_tpl<float>*, float, float) = 0;
	virtual void SetViewLimits(CCryActor* this, Vec3_tpl<float>, float, float) = 0;
	virtual void DamageInfo(CCryActor* this, unsigned int, unsigned int, IEntityClass*, float, int, const Vec3_tpl<float>) = 0;
	virtual unsigned int GetCurrentTargetEntityId(CCryActor* this) = 0;
	virtual const Vec3_tpl<float>* GetCurrentTargetPos(CCryActor* this) = 0;
	virtual void Kill(CCryActor* this) = 0;
	virtual bool IsSwimming(CCryActor* this) = 0;
	virtual bool IsHeadUnderWater(CCryActor* this) = 0;
	virtual bool IsSprinting(CCryActor* this) = 0;
	virtual bool CanFire(CCryActor* this) = 0;
	virtual void SetLockedStance(CCryActor* this, EStance) = 0;
	virtual void UnlockStance(CCryActor* this) = 0;
	virtual void UpdateMountedGunController(CCryActor* this, bool) = 0;
	virtual void OnPhysicsPreStep(CCryActor* this, float) = 0;
	virtual bool CheckInventoryRestrictions(CCryActor* this, const char*) = 0;
	virtual void SetStance(CCryActor* this, EStance) = 0;
	virtual void OnStanceChanged(CCryActor* this, EStance, EStance) = 0;
	virtual bool TrySetStance(CCryActor* this, EStance) = 0;
	virtual void SetCloakLayer(CCryActor* this, bool, CCryActor::eFadeRules) = 0;
	virtual void SetAnimTentacleParams(CCryActor* this, pe_params_rope*, float) = 0;
	virtual bool IsCloaked(CCryActor* this) = 0;
	virtual void DumpActorInfo(CCryActor* this) = 0;
	virtual float GetReloadSpeedScale(CCryActor* this) = 0;
	virtual float GetOverchargeDamageScale(CCryActor* this) = 0;
	virtual void BecomeRemotePlayer(CCryActor* this) = 0;
	virtual bool SetActorModel(CCryActor* this, const char*) = 0;
	virtual void PrepareLuaCache(CCryActor* this) = 0;
	virtual bool IsRemote(CCryActor* this) = 0;
	virtual void EnableStumbling(CCryActor* this, struct PlayerActor::Stumble::StumbleParameters*) = 0;
	virtual void DisableStumbling(CCryActor* this) = 0;
	virtual float GetCloakBlendSpeedScale(CCryActor* this) = 0;
	virtual IActorMovementController* CreateMovementController(CCryActor* this) = 0;
	virtual void SetModelIndex(CCryActor* this, unsigned __int8) = 0;
	virtual bool UpdateStance(CCryActor* this) = 0;
	unsigned int m_lastNetItemId;
	virtual bool m_isClient;
	virtual bool m_isPlayer;
	virtual bool m_isMigrating;
	virtual CHealth m_health;
	virtual std::shared_ptr<CCryActor> m_pThis;
	virtual IInventory* m_pInventory;
	virtual CCoherentValue<enum EStance> m_internalStance;
	virtual EStance m_desiredStance;
	virtual SStanceInfo m_stances[18];
	virtual EStance m_lockedStance;
	virtual SActorParams m_params;
	virtual IAnimatedCharacter* m_pAnimatedCharacter;
	virtual IActorMovementController* m_pMovementController;
	virtual std::shared_ptr<CActorImpulseHandler> m_pImpulseHandler;
	virtual SLinkStats m_linkStats;
	virtual std::vector<SIKLimb> m_IKLimbs;
	virtual unsigned __int8 m_currentPhysProfile;
	virtual float m_airControl;
	virtual float m_airResistance;
	virtual float m_inertia;
	virtual float m_inertiaAccel;
	virtual float m_timeImpulseRecover;
	virtual unsigned int m_netLastSelectablePickedUp;
	virtual unsigned int m_pendingDropEntityId;
	virtual CryStringT<char> m_currModel;
	virtual CryStringT<char> m_currShadowModel;
	virtual _smart_ptr<SLuaCache_ActorPhysicsParams> m_LuaCache_PhysicsParams;
	virtual _smart_ptr<SLuaCache_ActorGameParams> m_LuaCache_GameParams;
	virtual _smart_ptr<SLuaCache_ActorProperties> m_LuaCache_Properties;
	virtual float m_lastUnCloakTime;
	virtual float m_spectateSwitchTime;
	virtual float m_fAwaitingServerUseResponse;
	virtual int m_teamId;
	virtual bool m_IsImmuneToForbiddenZone;
	virtual bool m_enableSwitchingItems;
	virtual bool m_enableIronSights;
	virtual bool m_enablePickupItems;
	virtual bool m_cloakLayerActive;
	virtual unsigned __int8 m_netPhysCounter;
	virtual bool m_registeredAnimationDBAs;
	virtual bool m_bAllowHitImpulses;
	virtual bool m_bAwaitingServerUseResponse;
	virtual bool m_shouldPlayHitReactions;
	virtual __int16 m_boneIDs[17];
	virtual QuatT_tpl<float> m_boneTrans[17];
	virtual SActorPhysics m_actorPhysics;
	virtual CCryActor::SBlendRagdollParams m_blendRagdollParams;
	virtual IPhysicalEntity* m_pLegsCollider[2];
	virtual IPhysicalEntity* m_pLegsFrame;
	virtual IPhysicalEntity* m_pLegsIgnoredCollider;
	virtual int m_iboneLeg[2];
	virtual Vec3_tpl<float> m_ptSample[2];
	virtual char m_bLegActive[2];
	virtual unsigned int m_DefaultBodyDamageProfileId;
	virtual CBodyDestrutibilityInstance m_bodyDestructionInstance;
	virtual unsigned int m_OverrideBodyDamageProfileId;
	virtual CryStringT<char> m_sLipSyncExtensionType;
};
