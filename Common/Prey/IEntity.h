#pragma once
class IEntity
{
public:
  virtual ~IEntity() = 0;
  virtual unsigned int GetId() = 0;
  virtual unsigned __int64 GetGuid() = 0;
  virtual IEntityClass *GetClass() = 0;
  virtual const IEntityArchetype *GetArchetype() = 0;
  virtual IEntityArchetype *GetArchetype() = 0;
  virtual void SetFlags(unsigned int) = 0;
  virtual unsigned int GetFlags() = 0;
  virtual void AddFlags(unsigned int) = 0;
  virtual void ClearFlags(unsigned int) = 0;
  virtual bool CheckFlags(unsigned int) = 0;
  virtual void SetFlagsExtended(unsigned int) = 0;
  virtual unsigned int GetFlagsExtended() = 0;
  virtual bool IsGarbage() = 0;
  virtual void SetName(const char *) = 0;
  virtual const char *GetName() = 0;
  virtual const char *GetEntityTextDescription() = 0;
  virtual void SerializeXML(XmlNodeRef *, bool) = 0;
  virtual bool IsLoadedFromLevelFile() = 0;
  virtual void AttachChild(IEntity *, const SChildAttachParams *) = 0;
  virtual void DetachAll(int) = 0;
  virtual void DetachThis(int, int) = 0;
  virtual int GetChildCount() = 0;
  virtual IEntity *GetChild(int) = 0;
  virtual IEntity *GetParent() = 0;
  virtual Matrix34_tpl<float> *GetParentAttachPointWorldTM(Matrix34_tpl<float> *result) = 0;
  virtual bool IsParentAttachmentValid() = 0;
  virtual void SetWorldTM(const Matrix34_tpl<float> *, int) = 0;
  virtual void SetLocalTM(const Matrix34_tpl<float> *, int) = 0;
  virtual const Matrix34_tpl<float> *GetWorldTM() = 0;
  virtual Matrix34_tpl<float> *GetLocalTM(Matrix34_tpl<float> *result) = 0;
  virtual void GetWorldBounds(AABB *) = 0;
  virtual void GetLocalBounds(AABB *) = 0;
  virtual void SetPos(const Vec3_tpl<float> *, int, bool, bool) = 0;
  virtual const Vec3_tpl<float> *GetPos() = 0;
  virtual void SetRotation(const Quat_tpl<float> *, int) = 0;
  virtual const Quat_tpl<float> *GetRotation() = 0;
  virtual void SetScale(const Vec3_tpl<float> *, int) = 0;
  virtual const Vec3_tpl<float> *GetScale() = 0;
  virtual void SetPosRotScale(const Vec3_tpl<float> *, const Quat_tpl<float> *, const Vec3_tpl<float> *, int) = 0;
  virtual Vec3_tpl<float> *GetWorldPos(Vec3_tpl<float> *result) = 0;
  virtual Ang3_tpl<float> *GetWorldAngles(Ang3_tpl<float> *result) = 0;
  virtual Quat_tpl<float> *GetWorldRotation(Quat_tpl<float> *result) = 0;
  virtual const Vec3_tpl<float> *GetForwardDir() = 0;
  virtual void Activate(bool) = 0;
  virtual bool IsActive() = 0;
  virtual bool IsFromPool() = 0;
  virtual void PrePhysicsActivate(bool) = 0;
  virtual bool IsPrePhysicsActive() = 0;
  virtual void Serialize(CSerializeWrapper<ISerialize>, int) = 0;
  virtual bool SendEvent(SEntityEvent *) = 0;
  virtual void SetTimer(int, int) = 0;
  virtual void KillTimer(int) = 0;
  virtual void Hide(bool) = 0;
  virtual bool IsHidden() = 0;
  virtual void Invisible(bool) = 0;
  virtual bool IsInvisible() = 0;
  virtual IAIObject *GetAI() = 0;
  virtual bool HasAI() = 0;
  virtual unsigned int GetAIObjectID() = 0;
  virtual void SetAIObjectID(unsigned int) = 0;
  virtual bool RegisterInAISystem(const AIObjectParams *) = 0;
  virtual void SetUpdatePolicy(EEntityUpdatePolicy) = 0;
  virtual EEntityUpdatePolicy GetUpdatePolicy() = 0;
  virtual IEntityProxy *GetProxy(EEntityProxy) = 0;
  virtual void SetProxy(EEntityProxy, std::shared_ptr<IEntityProxy>) = 0;
  virtual std::shared_ptr<IEntityProxy> *CreateProxy(std::shared_ptr<IEntityProxy> *result, EEntityProxy) = 0;
  virtual void RegisterComponent(std::shared_ptr<IComponent>, const int) = 0;
  virtual void Physicalize(SEntityPhysicalizeParams *) = 0;
  virtual IPhysicalEntity *GetPhysics() = 0;
  virtual int PhysicalizeSlot(int, SEntityPhysicalizeParams *) = 0;
  virtual void UnphysicalizeSlot(int) = 0;
  virtual void UpdateSlotPhysics(int) = 0;
  virtual void SetPhysicsState(XmlNodeRef *) = 0;
  virtual bool HasPhysicsState() = 0;
  virtual void SetMaterial(IMaterial *) = 0;
  virtual IMaterial *GetMaterial() = 0;
  virtual bool IsSlotValid(int) = 0;
  virtual void FreeSlot(int) = 0;
  virtual int GetSlotCount() = 0;
  virtual bool GetSlotInfo(int, SEntitySlotInfo *) = 0;
  virtual const Matrix34_tpl<float> *GetSlotWorldTM(int) = 0;
  virtual const Matrix34_tpl<float> *GetSlotLocalTM(int, bool) = 0;
  virtual void SetSlotLocalTM(int, const Matrix34_tpl<float> *, int) = 0;
  virtual void SetSlotCameraSpacePos(int, const Vec3_tpl<float> *) = 0;
  virtual void GetSlotCameraSpacePos(int, Vec3_tpl<float> *) = 0;
  virtual bool SetParentSlot(int, int) = 0;
  virtual void SetSlotMaterial(int, IMaterial *) = 0;
  virtual void SetSlotFlags(int, unsigned int) = 0;
  virtual unsigned int GetSlotFlags(int) = 0;
  virtual bool ShouldUpdateCharacter(int) = 0;
  virtual ICharacterInstance *GetCharacter(int) = 0;
  virtual int SetCharacter(ICharacterInstance *, int) = 0;
  virtual IStatObj *GetStatObj(int) = 0;
  virtual IParticleEmitter *GetParticleEmitter(int) = 0;
  virtual IGeomCacheRenderNode *GetGeomCacheRenderNode(int) = 0;
  virtual void MoveSlot(IEntity *, int) = 0;
  virtual int SetStatObj(IStatObj *, int, bool, float) = 0;
  virtual int LoadGeometry(int, const char *, const char *, int) = 0;
  virtual int LoadCharacter(int, const char *, int) = 0;
  virtual int LoadGeomCache(int, const char *) = 0;
  virtual int LoadParticleEmitter(int, IParticleEffect *, const SpawnParams *, bool, bool) = 0;
  virtual int SetParticleEmitter(int, IParticleEmitter *, bool) = 0;
  virtual int SetBreakableGlass(int, IArkGlass *) = 0;
  virtual IArkGlass *GetBreakableGlass(int) = 0;
  virtual int LoadLight(int, CDLight *) = 0;
  virtual void InvalidateTM(int, bool) = 0;
  virtual void EnablePhysics(bool) = 0;
  virtual IEntityLink *GetEntityLinks() = 0;
  virtual IEntityLink *AddEntityLink(const char *, unsigned int) = 0;
  virtual void RemoveEntityLink(IEntityLink *) = 0;
  virtual void RemoveAllEntityLinks() = 0;
  virtual void SetSlotAlpha(int, float) = 0;
  virtual IEntity *UnmapAttachedChild(int *) = 0;
  virtual bool IsInitialized() = 0;
  virtual void DebugDraw(const SGeometryDebugDrawInfo *) = 0;
  virtual void GetMemoryUsage(ICrySizer *) = 0;
  virtual void IncKeepAliveCounter() = 0;
  virtual void DecKeepAliveCounter() = 0;
  virtual void ResetKeepAliveCounter() = 0;
  virtual bool IsKeptAlive() = 0;
  virtual const char *GetDisplayName() = 0;
  virtual void SetDisplayName(const char *) = 0;


  };
