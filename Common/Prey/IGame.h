#pragma once
class IGame
{
public:
  virtual ~IGame() = 0;
  virtual bool Init(IGameFramework *) = 0;
  virtual void InitEditor(IGameToEditorInterface *) = 0;
  virtual void GetMemoryStatistics(ICrySizer *) = 0;
  virtual bool CompleteInit() = 0;
  virtual void Shutdown() = 0;
  virtual int Update(bool, unsigned int) = 0;
  virtual void EditorResetGame(bool) = 0;
  virtual void PlayerIdSet(unsigned int) = 0;
  virtual const char *GetLongName() = 0;
  virtual const char *GetName() = 0;
  virtual void LoadActionMaps(const char *) = 0;
  virtual void OnClearPlayerIds() = 0;
  virtual CryStackStringT<char,256> *CreateSaveGameName(CryStackStringT<char,256> *result) = 0;
  virtual IGameFramework *GetIGameFramework() = 0;
  virtual const char *GetMappedLevelName(const char *) = 0;
  virtual IAntiCheatManager *GetAntiCheatManager() = 0;
  virtual bool DoInitialSavegame() = 0;
  virtual unsigned int AddGameWarning(const char *, const char *, IGameWarningsListener *) = 0;
  virtual void OnRenderScene(const SRenderingPassInfo *) = 0;
  virtual void RenderGameWarnings() = 0;
  virtual void RemoveGameWarning(const char *) = 0;
  virtual bool GameEndLevel(const char *) = 0;
  virtual void SetUserProfileChanged(bool) = 0;
  virtual const unsigned __int8 *GetDRMKey(unsigned int *) = 0;
  virtual const char *GetDRMFileList() = 0;
  virtual IGameStateRecorder *CreateGameStateRecorder(IGameplayListener *) = 0;
  virtual void FullSerialize(CSerializeWrapper<ISerialize>) = 0;
  virtual void FullSerializeBeforeEntities(CSerializeWrapper<ISerialize>) = 0;
  virtual void SerializeForLevelState(CSerializeWrapper<ISerialize>) = 0;
  virtual void PostSerialize() = 0;
  virtual void PostSerializeForLevelState() = 0;
  virtual bool CanSave() = 0;
  virtual void PostSerializeBeforeEntities() = 0;
  virtual void SerializeLTL(bool) = 0;
  virtual bool LevelIsTalosExterior() = 0;
  virtual IGame::ExportFilesInfo *ExportLevelData(IGame::ExportFilesInfo *result, const char *, const char *) = 0;
  virtual const char *ExportAudioPropagation(const char *) = 0;
  virtual void LoadExportedLevelData(const char *, const char *) = 0;
  virtual void LoadAudioPropagation(const char *) = 0;
  virtual void RegisterGameFlowNodes() = 0;
  virtual IGamePhysicsSettings *GetIGamePhysicsSettings() = 0;
  virtual void *GetGameInterface() = 0;
  virtual IArkDoor *GetIArkDoorSafe(unsigned int) = 0;
  virtual IArkEncounterManager *GetIArkEncounterManager() = 0;
  virtual IArkFactionManager *GetIArkFactionManager() = 0;
  virtual IArkGlintConfigManager *GetIArkGlintConfigManager() = 0;
  virtual IArkGravShaft *GetIArkGravShaftSafe(unsigned int) = 0;
  virtual IArkMetaTagManager *GetIArkMetaTagManager() = 0;
  virtual IArkPADialogManager *GetIArkPADialogManager() = 0;
  virtual IArkPatrolManager *GetIArkPatrolManager() = 0;
  virtual IArkPlayer *GetIArkPlayerPtr() = 0;
  virtual IArkPostEffectManager *GetIArkPostEffectManager() = 0;
  virtual IArkResponseManager *GetIArkResponseManager() = 0;
  virtual IArkGlooIslandNavLinkManager *GetIArkGlooIslandNavLinkManager() = 0;
  virtual IArkNpc *SafeGetIArkNpc(unsigned int) = 0;
  virtual void AddArkGameNoise(const unsigned int, const Vec3_tpl<float> *, const unsigned __int64, const unsigned __int64) = 0;
  virtual void ResetGameState() = 0;
  virtual void OnLevelToLevelTransition() = 0;
  virtual void OnLevelTransitionFinished() = 0;
  virtual std::vector<IGame::CaptureVolumeInfo> *GetCaptureVolumeInfos(std::vector<IGame::CaptureVolumeInfo> *result) = 0;
  virtual void OnNewGame(const int) = 0;
  virtual void LoadArkLevelProperties(const XmlNodeRef *) = 0;
  virtual void SetArkAutoMapScale(const float) = 0;
  virtual XmlNodeRef *GetArkLevelProperties(XmlNodeRef *result) = 0;
  virtual const char *GetCurrentArkLocationLabel() = 0;
  virtual const char *GetArkLoadLocationLabel() = 0;
  virtual void SetArkLoadLocationLabel(const char *const) = 0;
  virtual const char *GetArkLoadingScreenTip(bool) = 0;
  virtual const char *GetArkGameMode() = 0;
  virtual void OnSaveDeletedBySystem() = 0;
  virtual void RequestDisconnect(EArkLoadDisconnectReason) = 0;
  virtual EArkLoadDisconnectReason GetDisconnectReason() = 0;
  virtual void RequestPause(const bool) = 0;
  virtual void DebugDraw() = 0;
  virtual unsigned int GetExclusiveControllerDeviceIndex() = 0;
  virtual unsigned int GetPlatformUserIdPairedToDevice(unsigned __int64) = 0;
  virtual unsigned int GetCurrentUserPlatformUserId() = 0;
  virtual unsigned int GetPlayerProfilePlatformUserId(const char *) = 0;
  virtual bool IsPlayerProfileSignedInToOS(const char *) = 0;
  virtual bool IsPlatformUserSignedInToOS(unsigned int) = 0;
  virtual void RefreshControlScheme() = 0;
  virtual void UnlockPlayerCamera(float) = 0;
  virtual void LockPlayerCameraToAnimation(float) = 0;
  virtual void LockPlayerCameraToEntityBone(const unsigned int, const int, float) = 0;
  virtual void OpenPauseMenu(bool) = 0;
  virtual void DumpObjectiveStateToFile(const char *) = 0;


  };
