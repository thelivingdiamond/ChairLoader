#pragma once
class CActor
{
public:
  virtual ~IComponent(IComponent *this) = 0;
  virtual void ProcessEvent(IComponent *this, SEntityEvent *) = 0;
  virtual int GetEventPriority(IComponent *this, const int) = 0;
  virtual void Initialize(IComponent *this, const IComponent::SComponentInitializer *) = 0;
  virtual void GetMemoryUsage(IGameObjectExtension *this, ICrySizer *) = 0;
  virtual bool Init(IGameObjectExtension *this, IGameObject *) = 0;
  virtual void PostInit(IGameObjectExtension *this, IGameObject *) = 0;
  virtual void InitClient(IGameObjectExtension *this, int) = 0;
  virtual void PostInitClient(IGameObjectExtension *this, int) = 0;
  virtual bool ReloadExtension(IGameObjectExtension *this, IGameObject *, const SEntitySpawnParams *) = 0;
  virtual void PostReloadExtension(IGameObjectExtension *this, IGameObject *, const SEntitySpawnParams *) = 0;
  virtual bool GetEntityPoolSignature(IGameObjectExtension *this, CSerializeWrapper<ISerialize>) = 0;
  virtual void Release(IGameObjectExtension *this) = 0;
  virtual void FullSerialize(IGameObjectExtension *this, CSerializeWrapper<ISerialize>) = 0;
  virtual bool NetSerialize(IGameObjectExtension *this, CSerializeWrapper<ISerialize>, EEntityAspects, unsigned __int8, int) = 0;
  virtual unsigned int GetNetSerializeAspects(IGameObjectExtension *this) = 0;
  virtual void PostSerialize(IGameObjectExtension *this) = 0;
  virtual void SerializeSpawnInfo(IGameObjectExtension *this, CSerializeWrapper<ISerialize>) = 0;
  virtual _smart_ptr<ISerializableInfo> *GetSpawnInfo(IGameObjectExtension *this, _smart_ptr<ISerializableInfo> *result) = 0;
  virtual void Update(IGameObjectExtension *this, SEntityUpdateContext *, int) = 0;
  virtual void HandleEvent(IGameObjectExtension *this, const SGameObjectEvent *) = 0;
  virtual void SetChannelId(IGameObjectExtension *this, unsigned __int16) = 0;
  virtual void SetAuthority(IGameObjectExtension *this, bool) = 0;
  virtual const void *GetRMIBase(IGameObjectExtension *this) = 0;
  virtual void PostUpdate(IGameObjectExtension *this, float) = 0;
  virtual void PostRemoteSpawn(IGameObjectExtension *this) = 0;
  virtual void SetHealth(IActor *this, float) = 0;
  virtual float GetHealth(IActor *this) = 0;
  virtual int GetHealthAsRoundedPercentage(IActor *this) = 0;
  virtual void SetMaxHealth(IActor *this, float) = 0;
  virtual float GetMaxHealth(IActor *this) = 0;
  virtual int GetArmor(IActor *this) = 0;
  virtual int GetMaxArmor(IActor *this) = 0;
  virtual int GetTeamId(IActor *this) = 0;
  virtual bool IsFallen(IActor *this) = 0;
  virtual bool IsDead(IActor *this) = 0;
  virtual int IsGod(IActor *this) = 0;
  virtual void Fall(IActor *this, Vec3_tpl<float>) = 0;
  virtual bool AllowLandingBob(IActor *this) = 0;
  virtual EStance GetLockedStance(IActor *this) = 0;
  virtual EStance GetStance(IActor *this) = 0;
  virtual void PlayAction(IActor *this, const char *, const char *, bool) = 0;
  virtual IAnimationGraphState *GetAnimationGraphState(IActor *this) = 0;
  virtual void ResetAnimationState(IActor *this) = 0;
  virtual void CreateScriptEvent(IActor *this, const char *, float, const char *) = 0;
  virtual bool BecomeAggressiveToAgent(IActor *this, unsigned int) = 0;
  virtual void SetFacialAlertnessLevel(IActor *this, int) = 0;
  virtual void RequestFacialExpression(IActor *this, const char *, float *) = 0;
  virtual void PrecacheFacialExpression(IActor *this, const char *) = 0;
  virtual unsigned int GetGrabbedEntityId(IActor *this) = 0;
  virtual void HideAllAttachments(IActor *this, bool) = 0;
  virtual void SetIKPos(IActor *this, const char *, const Vec3_tpl<float> *, int) = 0;
  virtual void SetViewRotation(IActor *this, const Quat_tpl<float> *) = 0;
  virtual Quat_tpl<float> *GetViewRotation(IActor *this, Quat_tpl<float> *result) = 0;
  virtual bool IsFriendlyEntity(IActor *this, unsigned int, bool) = 0;
  virtual Vec3_tpl<float> *GetLocalEyePos(IActor *this, Vec3_tpl<float> *result) = 0;
  virtual void CameraShake(IActor *this, float, float, float, float, Vec3_tpl<float>, int, const char *) = 0;
  virtual IItem *GetHolsteredItem(IActor *this) = 0;
  virtual void HolsterItem(IActor *this, bool, bool, float, bool) = 0;
  virtual IItem *GetCurrentItem(IActor *this) = 0;
  virtual bool DropItem(IActor *this, unsigned int, float, bool, bool) = 0;
  virtual IInventory *GetInventory(IActor *this) = 0;
  virtual void NotifyCurrentItemChanged(IActor *this, IItem *) = 0;
  virtual IMovementController *GetMovementController(IActor *this) = 0;
  virtual IEntity *GetLinkedEntity(IActor *this) = 0;
  virtual unsigned __int8 GetSpectatorMode(IActor *this) = 0;
  virtual bool IsThirdPerson(IActor *this) = 0;
  virtual void ToggleThirdPerson(IActor *this) = 0;
  virtual bool IsStillWaitingOnServerUseResponse(IActor *this) = 0;
  virtual void SetStillWaitingOnServerUseResponse(IActor *this, bool) = 0;
  virtual void SetFlyMode(IActor *this, unsigned __int8, const float) = 0;
  virtual unsigned __int8 GetFlyMode(IActor *this) = 0;
  virtual bool IsPlayer(IActor *this) = 0;
  virtual bool IsClient(IActor *this) = 0;
  virtual bool IsMigrating(IActor *this) = 0;
  virtual void SetMigrating(IActor *this, bool) = 0;
  virtual void InitLocalPlayer(IActor *this) = 0;
  virtual const char *GetActorClassName(IActor *this) = 0;
  virtual int GetActorClass(IActor *this) = 0;
  virtual const char *GetEntityClassName(IActor *this) = 0;
  virtual void SerializeXML(IActor *this, XmlNodeRef *, bool) = 0;
  virtual void SerializeLevelToLevel(IActor *this, CSerializeWrapper<ISerialize> *) = 0;
  virtual const IAnimatedCharacter *GetAnimatedCharacter(IActor *this) = 0;
  virtual IAnimatedCharacter *GetAnimatedCharacter(IActor *this) = 0;
  virtual void PlayExactPositioningAnimation(IActor *this, const char *, bool, const Vec3_tpl<float> *, const Vec3_tpl<float> *, float, float, float) = 0;
  virtual void CancelExactPositioningAnimation(IActor *this) = 0;
  virtual void PlayAnimation(IActor *this, const char *, bool) = 0;
  virtual void SetTrackviewArkLookAt(IActor *this, IEntity *, const IActor::TrackviewLookPoseData *, const IActor::TrackviewLookPoseData *, const IActor::TrackviewLookPoseData *) = 0;
  virtual void SetTrackviewArkAimAt(IActor *this, IEntity *, const IActor::TrackviewLookPoseData *) = 0;
  virtual IArkSpeaker *GetArkSpeaker(IActor *this) = 0;
  virtual bool Respawn(IActor *this) = 0;
  virtual void ResetToSpawnLocation(IActor *this) = 0;
  virtual bool CanBreakGlass(IActor *this) = 0;
  virtual bool MustBreakGlass(IActor *this) = 0;
  virtual void EnableTimeDemo(IActor *this, bool) = 0;
  virtual void SwitchDemoModeSpectator(IActor *this, bool) = 0;
  virtual void SetCustomHead(IActor *this, const char *) = 0;
  virtual void OnAIProxyEnabled(IActor *this, bool) = 0;
  virtual void OnReturnedToPool(IActor *this) = 0;
  virtual void OnPreparedFromPool(IActor *this) = 0;
  virtual bool MountedGunControllerEnabled(IActor *this) = 0;
  virtual void MountedGunControllerEnabled(IActor *this, bool) = 0;
  virtual bool ShouldMuteWeaponSoundStimulus(IActor *this) = 0;
  virtual int GetPhysicalSkipEntities(IActor *this, IPhysicalEntity **, const int) = 0;
  virtual void OnReused(IActor *this, IEntity *, SEntitySpawnParams *) = 0;
  virtual void OnFakeHitToHitReactions(IActor *this, const HitInfo *) = 0;
  virtual Vec3_tpl<float> *GetAttackTargetPos(IActor *this, Vec3_tpl<float> *result) = 0;
  virtual bool IsArkNpcPlayer(IActor *this) = 0;
  virtual void IgnoreCollisionSignals(IActor *this, unsigned int, float) = 0;
  virtual bool IsIgnoringCollisionSignals(IActor *this, unsigned int) = 0;
  virtual bool IsZeroG(IActor *this) = 0;
  virtual const QuatT_tpl<float> *GetBoneTransform(int) = 0;
  virtual CCryActor *ToCryActor() = 0;
};
